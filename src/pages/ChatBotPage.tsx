import React, { useState, useRef, useEffect } from "react";
import { useAuth } from "../hooks/useAuth";

// Mock data cho l·ªãch s·ª≠ chat
const chatHistory = [
  { id: 1, name: "L√≤ s·∫•y cao t·∫ßn" },
  { id: 2, name: "Keo s·ªØa v√† x√∫c t√°c" },
  { id: 3, name: "C√°c lo·∫°i v·∫£i √°o d√†i" },
  { id: 4, name: "V·∫£i Umi l√† g√¨" },
  { id: 5, name: "T·ªëi ∆∞u ch√≠nh s√°ch b·∫£o m·∫≠t" },
  { id: 6, name: "T·ªïng h·ª£p kh·∫£o s√°t du l·ªãch" },
  { id: 7, name: "Tr√≠ch xu·∫•t n·ªôi dung web" },
  { id: 8, name: "Du l·ªãch c√¥ng ngh·ªá v√† c√° nh√¢n h√≥a" },
  { id: 9, name: "T√≠nh v·∫£i may ƒë·ªìng ph·ª•c" },
];

type ChatMessage = { from: "bot" | "user"; text: string };
const mockChatContent: Record<number, ChatMessage[]> = {
  1: [
    { from: "bot", text: "Xin ch√†o! B·∫°n c·∫ßn t∆∞ v·∫•n v·ªÅ l√≤ s·∫•y cao t·∫ßn?" },
    { from: "user", text: "V√¢ng, cho m√¨nh h·ªèi v·ªÅ nguy√™n l√Ω ho·∫°t ƒë·ªông." },
  ],
  2: [{ from: "bot", text: "B·∫°n mu·ªën bi·∫øt v·ªÅ keo s·ªØa hay x√∫c t√°c?" }],
  // ... c√°c ƒëo·∫°n chat kh√°c
};

const mockBotReply = (userMsg: string) => {
  // Gi·∫£ l·∫≠p tr·∫£ l·ªùi c·ªßa bot
  if (userMsg.toLowerCase().includes("n∆∞·ªõc cam")) {
    return (
      "Ch√†o b·∫°n, m√¨nh l√† chatbot t∆∞ v·∫•n ngh·ªÅ nghi·ªáp c·ªßa FPT University. R·∫•t ti·∫øc, th√¥ng tin m√¨nh c√≥ hi·ªán t·∫°i t·∫≠p trung v√†o c√°c ch∆∞∆°ng tr√¨nh h·ªçc, h·ªçc ph√≠ v√† c√°c ng√†nh ƒë√†o t·∫°o t·∫°i tr∆∞·ªùng. M√¨nh ch∆∞a ƒë∆∞·ª£c trang b·ªã ki·∫øn th·ª©c v·ªÅ c√°ch pha n∆∞·ªõc cam üçä.\n\n" +
      "Tuy nhi√™n, n·∫øu b·∫°n c√≥ b·∫•t k·ª≥ th·∫Øc m·∫Øc n√†o v·ªÅ c√°c ng√†nh h·ªçc nh∆∞ C√¥ng ngh·ªá th√¥ng tin, Qu·∫£n tr·ªã kinh doanh, C√¥ng ngh·ªá truy·ªÅn th√¥ng ho·∫∑c c√°c v·∫•n ƒë·ªÅ li√™n quan ƒë·∫øn h·ªçc ph√≠ t·∫°i FPT University, m√¨nh r·∫•t s·∫µn l√≤ng h·ªó tr·ª£! üòä\n\n" +
      "N·∫øu b·∫°n c·∫ßn th√™m th√¥ng tin, ƒë·ª´ng ng·∫ßn ng·∫°i li√™n h·ªá nh√©:\n" +
      "üìû Hotline: (024) 7300 1866\n" +
      "‚úâÔ∏è Email: daihocfpt@fpt.edu.vn"
    );
  }
  return "Xin ch√†o! M√¨nh l√† chatbot t∆∞ v·∫•n c·ªßa FPT University. B·∫°n c·∫ßn h·ªó tr·ª£ g√¨?";
};

const ChatBotPage: React.FC = () => {
  const { user, isAuthenticated, logout } = useAuth();
  const [selectedChat, setSelectedChat] = useState<number>(chatHistory[0].id);
  const [messages, setMessages] = useState([
    {
      from: "bot",
      text: "Xin ch√†o! M√¨nh l√† chatbot t∆∞ v·∫•n c·ªßa FPT University. B·∫°n c·∫ßn h·ªó tr·ª£ g√¨?",
    },
  ]);
  const [input, setInput] = useState("");
  const [sidebarCollapsed, setSidebarCollapsed] = useState(false);
  const [isUserDropdownOpen, setIsUserDropdownOpen] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const userDropdownRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages]);

  // Close user dropdown when clicking outside
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (
        userDropdownRef.current &&
        !userDropdownRef.current.contains(event.target as Node)
      ) {
        setIsUserDropdownOpen(false);
      }
    };

    document.addEventListener("mousedown", handleClickOutside);
    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, []);

  const handleSend = () => {
    if (!input.trim()) return;
    const userMsg = input;
    setMessages((msgs) => [...msgs, { from: "user", text: userMsg }]);
    setInput("");
    setTimeout(() => {
      setMessages((msgs) => [
        ...msgs,
        { from: "bot", text: mockBotReply(userMsg) },
      ]);
    }, 800);
  };

  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {
    if (e.key === "Enter") handleSend();
  };

  const handleLogout = async () => {
    await logout();
    setIsUserDropdownOpen(false);
  };

  // Get user initials for avatar
  const getUserInitials = (fullName: string) => {
    return fullName
      .split(" ")
      .map((name) => name.charAt(0))
      .join("")
      .toUpperCase()
      .slice(0, 2);
  };

  return (
    <div className="h-screen flex bg-gray-50">
      {/* Sidebar l·ªãch s·ª≠ chat - c√≥ th·ªÉ collapse */}
      <aside
        className={`${
          sidebarCollapsed ? "w-16" : "w-72"
        } bg-white border-r border-gray-200 transition-all duration-300 ease-in-out flex flex-col`}
      >
        {/* Header sidebar v·ªõi toggle button */}
        <div className="p-4 border-b border-gray-200 flex items-center justify-between">
          {!sidebarCollapsed && (
            <h2 className="text-lg font-bold text-gray-800">ƒêo·∫°n chat</h2>
          )}
          <button
            onClick={() => setSidebarCollapsed(!sidebarCollapsed)}
            className="p-2 rounded-lg hover:bg-gray-100 transition-colors"
            title={sidebarCollapsed ? "M·ªü r·ªông sidebar" : "Thu g·ªçn sidebar"}
          >
            <svg
              className={`w-5 h-5 text-gray-600 transition-transform ${
                sidebarCollapsed ? "rotate-180" : ""
              }`}
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={2}
                d="M15 19l-7-7 7-7"
              />
            </svg>
          </button>
        </div>

        {/* Chat history list */}
        <div className="flex-1 overflow-y-auto p-2">
          <ul className="space-y-1">
            {chatHistory.map((chat) => (
              <li
                key={chat.id}
                className={`p-2 rounded cursor-pointer transition font-medium ${
                  selectedChat === chat.id
                    ? "bg-orange-100 text-orange-700"
                    : "hover:bg-gray-100 text-gray-700"
                }`}
                onClick={() => setSelectedChat(chat.id)}
                title={sidebarCollapsed ? chat.name : undefined}
              >
                {sidebarCollapsed ? (
                  <div className="flex justify-center">
                    <span className="text-lg">üí¨</span>
                  </div>
                ) : (
                  <span className="truncate block">{chat.name}</span>
                )}
              </li>
            ))}
          </ul>
        </div>

        {/* User section at bottom */}
        {isAuthenticated && (
          <div className="border-t border-gray-200 p-4">
            <div className="relative" ref={userDropdownRef}>
              {/* User info */}
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-3 flex-1 min-w-0">
                  {/* Avatar */}
                  <div className="w-8 h-8 bg-orange-500 text-white rounded-full flex items-center justify-center text-sm font-medium flex-shrink-0">
                    {user ? getUserInitials(user.fullName) : "U"}
                  </div>

                  {/* User name - hidden when collapsed */}
                  {!sidebarCollapsed && (
                    <div className="min-w-0 flex-1">
                      <p className="text-sm font-medium text-gray-700 truncate">
                        {user?.fullName || "User"}
                      </p>
                      <p className="text-xs text-gray-500 truncate">
                        {user?.email || "user@example.com"}
                      </p>
                    </div>
                  )}
                </div>

                {/* Settings button */}
                {!sidebarCollapsed && (
                  <button
                    onClick={() => setIsUserDropdownOpen(!isUserDropdownOpen)}
                    className="p-1 rounded-lg hover:bg-gray-100 transition-colors flex-shrink-0"
                    title="C√†i ƒë·∫∑t"
                  >
                    <svg
                      className="w-4 h-4 text-gray-600"
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                    >
                      <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        strokeWidth={2}
                        d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"
                      />
                      <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        strokeWidth={2}
                        d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"
                      />
                    </svg>
                  </button>
                )}
              </div>

              {/* Dropdown menu - appears above */}
              {isUserDropdownOpen && !sidebarCollapsed && (
                <div className="absolute bottom-full left-0 right-0 mb-2 bg-white rounded-md shadow-lg py-1 z-50 border border-gray-200">
                  {/* Settings */}
                  <button
                    className="flex items-center w-full px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 transition-colors"
                    onClick={() => setIsUserDropdownOpen(false)}
                  >
                    <svg
                      className="w-4 h-4 mr-3"
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                    >
                      <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        strokeWidth={2}
                        d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"
                      />
                      <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        strokeWidth={2}
                        d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"
                      />
                    </svg>
                    C√†i ƒë·∫∑t
                  </button>

                  {/* Divider */}
                  <div className="border-t border-gray-100 my-1"></div>

                  {/* Logout */}
                  <button
                    onClick={handleLogout}
                    className="flex items-center w-full px-4 py-2 text-sm text-red-600 hover:bg-red-50 transition-colors"
                  >
                    <svg
                      className="w-4 h-4 mr-3"
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                    >
                      <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        strokeWidth={2}
                        d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1"
                      />
                    </svg>
                    ƒêƒÉng xu·∫•t
                  </button>
                </div>
              )}
            </div>
          </div>
        )}
      </aside>

      {/* Main chat area */}
      <main className="flex-1 flex flex-col">
        {/* Header chat */}
        <header className="h-16 flex items-center px-6 border-b bg-white shadow-sm flex-shrink-0">
          <span className="text-xl font-semibold text-gray-800">
            {chatHistory.find((c) => c.id === selectedChat)?.name}
          </span>
        </header>

        {/* Chat messages area - c√≥ max height v√† scroll */}
        <div className="flex-1 overflow-y-auto p-6 flex flex-col gap-2 min-h-0">
          {(
            mockChatContent[selectedChat] || [
              { from: "bot", text: "Ch∆∞a c√≥ n·ªôi dung chat cho ch·ªß ƒë·ªÅ n√†y." },
            ]
          ).map((msg: ChatMessage, idx: number) => (
            <div
              key={idx}
              className={`max-w-[70%] px-4 py-2 rounded-lg shadow text-base font-sans ${
                msg.from === "user"
                  ? "bg-orange-500 text-white self-end"
                  : "bg-gray-200 text-gray-800 self-start"
              }`}
            >
              {msg.text}
            </div>
          ))}
          <div ref={messagesEndRef} />
        </div>

        {/* Input area - fixed at bottom */}
        <div className="p-4 border-t bg-white flex-shrink-0">
          <div className="flex items-center gap-2">
            <input
              type="text"
              className="flex-1 rounded-full border border-gray-300 px-4 py-2 focus:outline-none focus:ring-2 focus:ring-orange-400"
              placeholder="Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n..."
              value={input}
              onChange={(e) => setInput(e.target.value)}
              onKeyDown={handleKeyDown}
            />
            <button
              className="bg-orange-500 hover:bg-orange-600 text-white font-semibold px-6 py-2 rounded-full transition"
              onClick={handleSend}
            >
              G·ª≠i
            </button>
          </div>
        </div>
      </main>
    </div>
  );
};

export default ChatBotPage;
